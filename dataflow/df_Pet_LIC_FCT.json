{
	"name": "df_Pet_LIC_FCT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTableClean",
						"type": "DatasetReference"
					},
					"name": "SourceStg"
				},
				{
					"dataset": {
						"referenceName": "ds_edw_Location_DIM",
						"type": "DatasetReference"
					},
					"name": "SourceLocationDIm"
				},
				{
					"dataset": {
						"referenceName": "ds_edw_date_dim",
						"type": "DatasetReference"
					},
					"name": "sourceDateDim"
				},
				{
					"dataset": {
						"referenceName": "ds_EDW_Breed_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceBreedDim"
				},
				{
					"dataset": {
						"referenceName": "ds_Pet_license_fact",
						"type": "DatasetReference"
					},
					"name": "FCTMaxID"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "joinLocationDIM"
				},
				{
					"name": "joinBreedDIM"
				},
				{
					"name": "joinDateDIM"
				},
				{
					"name": "joinFactMaxID"
				},
				{
					"name": "GroupBy"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     format: 'table') ~> SourceStg",
				"source(output(",
				"          LOCATION_SK as string,",
				"          ZIP as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> SourceLocationDIm",
				"source(output(",
				"          DT as string,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as string,",
				"          END_DAY_OF_MONTH as string,",
				"          QUARTER_NUM as string,",
				"          DAY_OF_WEEK as string,",
				"          IS_WEEKEND as string,",
				"          YEAR_NUM as string,",
				"          MONTH_NUM as string,",
				"          DAY_NUM as string,",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDateDim",
				"source(output(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreedDim",
				"source(output(",
				"          PET_LIC_SK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(PET_LICENSE_SK),0) as\\nPet_Lic_SK FROM EDW.PET_LICENSES_FACT',",
				"     format: 'query') ~> FCTMaxID",
				"SourceStg, SourceLocationDIm join(ZIP_CODE == ZIP,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLocationDIM",
				"joinLocationDIM, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreedDIM",
				"joinBreedDIM, sourceDateDim join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDateDIM",
				"joinDateDIM, FCTMaxID join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFactMaxID",
				"joinFactMaxID aggregate(groupBy(DATE_DIM_SK,",
				"          LOCATION_SK,",
				"          BREED_SK)) ~> GroupBy",
				"GroupBy keyGenerate(output({undefined} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1"
			]
		}
	}
}